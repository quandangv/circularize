[gd_scene load_steps=11 format=2]

[ext_resource path="res://theme.tres" type="Theme" id=1]
[ext_resource path="res://small_theme.tres" type="Theme" id=2]
[ext_resource path="res://icons/resume.svg" type="Texture" id=3]
[ext_resource path="res://icons/pause.svg" type="Texture" id=4]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

var power = 2
var size = 10
var point_alpha = 0
var angle_count = 4
var resolution = 2

export var shape_color:Color = Color.white
export var vertex_color:Color = Color.cyan

func pingpong(value, low, high):
  var size = high - low
  var mod = fmod(value, size*2)
  return low + mod if mod < size else high+size-mod

func _draw():
  var points = get_shape(size, power, angle_count, resolution)
  draw_colored_polygon(points, shape_color, PoolVector2Array(), null, null, true)
  if point_alpha > 0:
    var color = vertex_color
    color.a = point_alpha
    for point in points:
      draw_circle(point, sqrt(size)*0.07, color)

func signed_pow(a, b):
  if a < 0:
    return -pow(-a, b)
  return pow(a, b)

func smooth_step(x:float, power:float):
  var constant = 1
  if power < 2:
    power = 4/power
    x+=1
    constant = 0
  return signed_pow(2*asin(fmod(x, 2) - 1)/PI, sqrt(power)/2) + floor(x/2)*2 + constant

const sin30 = sqrt(3)/2
func get_shape(size:float, power:float, side_count:int, resolution:float=1):  
  var step_count = max(ceil(size*resolution/2/sqrt(side_count))*2, 1)*side_count
  var step = side_count*2/step_count
  var points:PoolVector2Array
  match side_count:
    3:
      power = 1+(power-1)*0.73
      for i in range(step_count):
        var theta = smooth_step(i*step, power)/side_count*PI
        var floored = theta - fmod(theta, PI*2/3) - PI*2/3
        theta = theta - fmod(theta, PI*2/3)/2 + PI/6
        var c = cos(theta)
        var s = sin(theta) * sin30
        var coord1 = max(c, 0)
        var coord2 = max(-c/2 - s, 0)
        var coord3 = max(-c/2 + s, 0)
        var length = size/pow(pow(abs(coord1), power) + pow(abs(coord2), power) + pow(abs(coord3), power), 1/power)
        points.append(Vector2(length, 0).rotated(theta) + Vector2(size*2/3, 0).rotated(floored))
    4:
      for i in range(step_count):
        var theta = smooth_step(i*step, power)/side_count*PI
        var length = size/pow(pow(abs(sin(theta)), power) + pow(abs(cos(theta)), power), 1/power)
        points.append(Vector2(length, 0).rotated(theta))
  return points
"

[sub_resource type="GDScript" id=2]
script/source = "extends CanvasLayer

onready var parent = get_parent()
export(NodePath) var angle_label

func _ready():
  angle_label = get_node(angle_label)

func sharpness_changed(value):
  value = clamp(value, -0.99999, 0.99999)
  parent.power = -log((1-value)/(value+3))*1.8204784532
  if parent.angle_count == 3:
    parent.power = max(parent.power, 1)
  parent.update()

func size_changed(value):
  parent.size = value
  parent.update()

func show_vertices_changed(value):
  parent.point_alpha = value
  parent.update()

func resolution_changed(value):
  parent.resolution = value
  parent.update()

func angle_changed(angle):
  parent.angle_count = angle
  if angle == 3:
    parent.power = max(parent.power, 1)
    angle_label.text = \"triangle\"
  elif angle == 4:
    angle_label.text = \"square\"
  else:
    angle_label.text = \"???\"
  parent.update()
"

[sub_resource type="GDScript" id=6]
script/source = "extends Button

export(NodePath) var anim
export var pause_icon:Texture
onready var resume_icon = icon

func _ready():
  anim = get_node(anim)
func _toggled(button_pressed):
  if button_pressed:
    anim.play(\"animate\")
    icon = pause_icon
  else:
    anim.stop()
    icon = resume_icon
"

[sub_resource type="Animation" id=4]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:value")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}

[sub_resource type="Animation" id=5]
resource_name = "animate"
length = 4.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:value")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1.8, 2.2 ),
"transitions": PoolRealArray( 0.5, 2, 2 ),
"update": 0,
"values": [ -1.0, 0.99, 0.99 ]
}

[sub_resource type="GDScript" id=3]
script/source = "extends HSlider

signal angle_changed(angle)

func _ready():
  connect(\"value_changed\", self, \"value_changed\")

func value_changed(_num):
  if value < 3.5:
    value = 3
  else:
    value = 4
  emit_signal(\"angle_changed\", value)
"

[node name="shape" type="Node2D"]
z_index = 1
script = SubResource( 1 )
shape_color = Color( 0.847059, 0.937255, 1, 0.752941 )
vertex_color = Color( 0, 0.552941, 1, 1 )

[node name="camera" type="Camera2D" parent="."]
current = true
zoom = Vector2( 0.1, 0.1 )

[node name="ui" type="CanvasLayer" parent="."]
layer = -1
script = SubResource( 2 )
angle_label = NodePath("box/sliders/Label5")

[node name="box" type="VBoxContainer" parent="ui"]
anchor_top = 1.0
anchor_bottom = 1.0
margin_left = 20.0
margin_top = -16.0
margin_right = 40.0
margin_bottom = -20.0
grow_vertical = 0
rect_min_size = Vector2( 300, 0 )
theme = ExtResource( 1 )

[node name="sliders" type="GridContainer" parent="ui/box"]
margin_right = 300.0
margin_bottom = 274.0
theme = ExtResource( 2 )
custom_constants/hseparation = 10
columns = 2

[node name="title" type="Label" parent="ui/box/sliders"]
margin_right = 181.0
margin_bottom = 59.0
theme = ExtResource( 1 )
text = "controls"

[node name="play" type="Button" parent="ui/box/sliders"]
margin_left = 236.0
margin_right = 300.0
margin_bottom = 59.0
size_flags_horizontal = 8
toggle_mode = true
icon = ExtResource( 3 )
flat = true
script = SubResource( 6 )
anim = NodePath("../sharpness/anim")
pause_icon = ExtResource( 4 )

[node name="sharpness" type="HSlider" parent="ui/box/sliders"]
margin_top = 63.0
margin_right = 181.0
margin_bottom = 102.0
rect_min_size = Vector2( 0, 30 )
size_flags_horizontal = 3
size_flags_vertical = 3
min_value = -1.0
max_value = 1.0
step = 0.0

[node name="anim" type="AnimationPlayer" parent="ui/box/sliders/sharpness"]
anims/RESET = SubResource( 4 )
anims/animate = SubResource( 5 )

[node name="Label" type="Label" parent="ui/box/sliders"]
margin_left = 191.0
margin_top = 63.0
margin_right = 300.0
margin_bottom = 102.0
text = "sharpness"
valign = 1

[node name="size" type="HSlider" parent="ui/box/sliders"]
margin_top = 106.0
margin_right = 181.0
margin_bottom = 145.0
rect_min_size = Vector2( 0, 30 )
size_flags_horizontal = 3
size_flags_vertical = 3
min_value = 0.001
max_value = 30.0
step = 0.0
value = 10.0

[node name="Label2" type="Label" parent="ui/box/sliders"]
margin_left = 191.0
margin_top = 106.0
margin_right = 300.0
margin_bottom = 145.0
text = "size"
valign = 1

[node name="resolution" type="HSlider" parent="ui/box/sliders"]
margin_top = 149.0
margin_right = 181.0
margin_bottom = 188.0
rect_min_size = Vector2( 0, 30 )
size_flags_horizontal = 3
size_flags_vertical = 3
min_value = 0.001
max_value = 5.0
step = 0.0
value = 2.0

[node name="Label4" type="Label" parent="ui/box/sliders"]
margin_left = 191.0
margin_top = 149.0
margin_right = 300.0
margin_bottom = 188.0
text = "resolution"
valign = 1

[node name="vertices" type="HSlider" parent="ui/box/sliders"]
margin_top = 192.0
margin_right = 181.0
margin_bottom = 231.0
rect_min_size = Vector2( 0, 30 )
size_flags_horizontal = 3
size_flags_vertical = 3
max_value = 1.0
step = 0.0

[node name="Label3" type="Label" parent="ui/box/sliders"]
margin_left = 191.0
margin_top = 192.0
margin_right = 300.0
margin_bottom = 231.0
text = "vertices"
valign = 1

[node name="angles" type="HSlider" parent="ui/box/sliders"]
margin_top = 235.0
margin_right = 181.0
margin_bottom = 274.0
rect_min_size = Vector2( 0, 30 )
size_flags_horizontal = 3
size_flags_vertical = 3
max_value = 4.0
step = 0.0
value = 4.0
script = SubResource( 3 )

[node name="Label5" type="Label" parent="ui/box/sliders"]
margin_left = 191.0
margin_top = 235.0
margin_right = 300.0
margin_bottom = 274.0
text = "square"
valign = 1

[connection signal="value_changed" from="ui/box/sliders/sharpness" to="ui" method="sharpness_changed"]
[connection signal="value_changed" from="ui/box/sliders/size" to="ui" method="size_changed"]
[connection signal="value_changed" from="ui/box/sliders/resolution" to="ui" method="resolution_changed"]
[connection signal="value_changed" from="ui/box/sliders/vertices" to="ui" method="show_vertices_changed"]
[connection signal="angle_changed" from="ui/box/sliders/angles" to="ui" method="angle_changed"]
