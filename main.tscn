[gd_scene load_steps=13 format=2]

[ext_resource path="res://theme.tres" type="Theme" id=1]
[ext_resource path="res://small_theme.tres" type="Theme" id=2]
[ext_resource path="res://icons/resume.svg" type="Texture" id=3]
[ext_resource path="res://icons/pause.svg" type="Texture" id=4]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

onready var sharpness = ShapeLib.power2sharpness(2)
var size = 10
var point_alpha = 0
var angle_count = 4
var resolution = 2
export var point_ratio:float = 1
export var animated = false

export var shape_color:Color = Color.white
export var vertex_color:Color = Color.cyan

func _process(delta):
  if animated:
    update()

func _draw():
  var points = ShapeLib.get_shape(size, sharpness, angle_count, resolution)
  draw_colored_polygon(points, shape_color, PoolVector2Array(), null, null, true)
  if point_alpha > 0:
    var color = vertex_color
    color.a = point_alpha
    for i in range(ceil(len(points)*point_ratio)):
      draw_circle(points[i], sqrt(size)*0.1, color)
"

[sub_resource type="GDScript" id=2]
script/source = "extends CanvasLayer

onready var parent = get_parent()
export(NodePath) var angle_label
export(NodePath) var equation
export(NodePath) var sharpness_control

func _ready():
  angle_label = get_node(angle_label)
  equation = get_node(equation)
  sharpness_control = get_node(sharpness_control)
  sharpness_control.value = ShapeLib.power2sharpness(2)

func sharpness_changed(value):
  value = clamp(value, 0, 0.99999)
  parent.sharpness = value
  equation.set_stat(parent.angle_count, ShapeLib.sharpness2power(parent.sharpness), parent.size)
  parent.update()

func size_changed(value):
  parent.size = value
  equation.set_stat(parent.angle_count, ShapeLib.sharpness2power(parent.sharpness), parent.size)
  parent.update()

func show_vertices_changed(value):
  parent.point_alpha = value
  parent.update()

func resolution_changed(value):
  parent.resolution = value
  parent.update()

func angle_changed(angle):
  parent.angle_count = angle
  if angle == 3:
    angle_label.text = \"triangle\"
  elif angle == 4:
    angle_label.text = \"square\"
  else:
    angle_label.text = \"???\"
  equation.set_stat(parent.angle_count, ShapeLib.sharpness2power(parent.sharpness), parent.size)
  parent.update()
"

[sub_resource type="GDScript" id=6]
script/source = "extends Button

export(NodePath) var anim
export(NodePath) var tween
export(NodePath) var shape
export var pause_icon:Texture
onready var resume_icon = icon
const start_intro_time = 1

func _ready():
  anim = get_node(anim)
  shape = get_node(shape)
  tween = get_node(tween)
func _toggled(button_pressed):
  if button_pressed:
    icon = pause_icon
    shape.animated = true
    anim.play(\"intro\")
    tween.interpolate_property(shape, \"shape_color\", null, Color.transparent, start_intro_time)
    tween.interpolate_property(shape, \"point_ratio\", null, 0, start_intro_time)
    tween.start()
    yield(anim, \"animation_finished\")
    shape.animated = false
    if pressed:
      anim.play(\"animate\")
  else:
    anim.stop()
    icon = resume_icon
"

[sub_resource type="Animation" id=4]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:value")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("../../../..:point_ratio")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 1.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("../vertices:value")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("../../../..:shape_color")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0.752941 ) ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("../../../equation:modulate")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("../angles:value")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 4.0 ]
}

[sub_resource type="Animation" id=5]
resource_name = "animate"
length = 16.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:value")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1.8, 2.2, 4, 5.9, 6.3, 8, 9.9, 10.3, 12, 13.8, 14.2, 16 ),
"transitions": PoolRealArray( 0.5, 2, 2, 1, 2, 3, 0.333333, 2, 3, 0.5, 2, 2, 1 ),
"update": 0,
"values": [ 0.0, 0.99, 0.99, 0.0, 0.99, 0.99, 0.0, 0.99, 0.99, 0.0, 0.99, 0.99, 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("../angles:value")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 4, 12, 16 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 1,
"values": [ 4.0, 3.0, 4.0, 3.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("../../../..:shape_color")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 4, 4.5, 11.5, 12, 16 ),
"transitions": PoolRealArray( 200, 1, 1, 1, 1.19718e-05, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0.752941 ), Color( 0.847059, 0.937255, 1, 0 ), Color( 1, 1, 1, 0.752941 ), Color( 1, 1, 1, 0.752941 ), Color( 0.847059, 0.937255, 1, 0 ), Color( 1, 1, 1, 0.752941 ) ]
}

[sub_resource type="Animation" id=7]
resource_name = "intro"
length = 7.5
tracks/0/type = "value"
tracks/0/path = NodePath(".:value")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 1, 6.5, 7.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 0.76, 0.76, 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("../../../..:point_ratio")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 1.9, 6 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 1.0 ]
}
tracks/2/type = "value"
tracks/2/path = NodePath("../vertices:value")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 1.9, 6.5, 7.5 ),
"transitions": PoolRealArray( 1, 0.420448, 1 ),
"update": 0,
"values": [ 1.0, 1.0, 0.0 ]
}
tracks/3/type = "value"
tracks/3/path = NodePath("../../../..:shape_color")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/keys = {
"times": PoolRealArray( 1.9, 6 ),
"transitions": PoolRealArray( 2.46229, 1 ),
"update": 0,
"values": [ Color( 0.847059, 0.937255, 1, 0 ), Color( 1, 1, 1, 0.752941 ) ]
}
tracks/4/type = "value"
tracks/4/path = NodePath("../../../equation:modulate")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/keys = {
"times": PoolRealArray( 0, 0.7, 0.9, 1.9 ),
"transitions": PoolRealArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}
tracks/5/type = "value"
tracks/5/path = NodePath("../angles:value")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/keys = {
"times": PoolRealArray( 1 ),
"transitions": PoolRealArray( 1 ),
"update": 1,
"values": [ 4.0 ]
}

[sub_resource type="GDScript" id=3]
script/source = "extends HSlider

signal angle_changed(angle)

func _ready():
  connect(\"value_changed\", self, \"value_changed\")

func value_changed(_num):
  if value < 3.5:
    value = 3
  else:
    value = 4
  emit_signal(\"angle_changed\", value)
"

[sub_resource type="GDScript" id=8]
script/source = "extends Label

const superscripts = {'1':'¹', '2':'²', '3':'³', '4':'⁴', '5':'⁵', '6':'⁶', '7':'⁷', '8':'⁸', '9':'⁹', '0':'⁰', '-':'⁻', '.':'·'}
func set_stat(angles, power, size):
  if angles != 4:
    text = \"Details at github.com/quandangv/circularize\"
  else:
    power = '%1.02f' % power
    size = '%1.02f' % size
    for key in superscripts:
      power = power.replace(key, superscripts[key])
    text = '|x|' + power + ' + |y|' + power + ' = ' + size + power
"

[node name="shape" type="Node2D"]
z_index = 1
script = SubResource( 1 )
shape_color = Color( 1, 1, 1, 0.752941 )
vertex_color = Color( 0, 0.415686, 1, 1 )

[node name="camera" type="Camera2D" parent="."]
current = true
zoom = Vector2( 0.1, 0.1 )

[node name="ui" type="CanvasLayer" parent="."]
layer = -1
script = SubResource( 2 )
angle_label = NodePath("box/sliders/Label5")
equation = NodePath("equation")
sharpness_control = NodePath("box/sliders/sharpness")

[node name="box" type="VBoxContainer" parent="ui"]
anchor_top = 1.0
anchor_bottom = 1.0
margin_left = 20.0
margin_top = -16.0
margin_right = 40.0
margin_bottom = -20.0
grow_vertical = 0
rect_min_size = Vector2( 300, 0 )
theme = ExtResource( 1 )

[node name="sliders" type="GridContainer" parent="ui/box"]
margin_right = 300.0
margin_bottom = 259.0
theme = ExtResource( 2 )
custom_constants/hseparation = 15
columns = 2

[node name="title" type="Label" parent="ui/box/sliders"]
margin_right = 185.0
margin_bottom = 59.0
theme = ExtResource( 1 )
text = "controls"

[node name="play" type="Button" parent="ui/box/sliders"]
margin_left = 236.0
margin_right = 300.0
margin_bottom = 59.0
size_flags_horizontal = 8
toggle_mode = true
icon = ExtResource( 3 )
flat = true
script = SubResource( 6 )
anim = NodePath("../sharpness/anim")
tween = NodePath("../sharpness/tween")
shape = NodePath("../../../..")
pause_icon = ExtResource( 4 )

[node name="sharpness" type="HSlider" parent="ui/box/sliders"]
margin_top = 63.0
margin_right = 185.0
margin_bottom = 99.0
rect_min_size = Vector2( 0, 30 )
size_flags_horizontal = 3
size_flags_vertical = 3
max_value = 1.0
step = 0.0

[node name="anim" type="AnimationPlayer" parent="ui/box/sliders/sharpness"]
anims/RESET = SubResource( 4 )
anims/animate = SubResource( 5 )
anims/intro = SubResource( 7 )

[node name="tween" type="Tween" parent="ui/box/sliders/sharpness"]

[node name="Label" type="Label" parent="ui/box/sliders"]
margin_left = 200.0
margin_top = 63.0
margin_right = 300.0
margin_bottom = 99.0
text = "sharpness"
valign = 1

[node name="size" type="HSlider" parent="ui/box/sliders"]
margin_top = 103.0
margin_right = 185.0
margin_bottom = 139.0
rect_min_size = Vector2( 0, 30 )
size_flags_horizontal = 3
size_flags_vertical = 3
min_value = 0.001
max_value = 30.0
step = 0.0
value = 10.0

[node name="Label2" type="Label" parent="ui/box/sliders"]
margin_left = 200.0
margin_top = 103.0
margin_right = 300.0
margin_bottom = 139.0
text = "size"
valign = 1

[node name="resolution" type="HSlider" parent="ui/box/sliders"]
margin_top = 143.0
margin_right = 185.0
margin_bottom = 179.0
rect_min_size = Vector2( 0, 30 )
size_flags_horizontal = 3
size_flags_vertical = 3
min_value = 0.001
max_value = 5.0
step = 0.0
value = 2.0

[node name="Label4" type="Label" parent="ui/box/sliders"]
margin_left = 200.0
margin_top = 143.0
margin_right = 300.0
margin_bottom = 179.0
text = "resolution"
valign = 1

[node name="vertices" type="HSlider" parent="ui/box/sliders"]
margin_top = 183.0
margin_right = 185.0
margin_bottom = 219.0
rect_min_size = Vector2( 0, 30 )
size_flags_horizontal = 3
size_flags_vertical = 3
max_value = 1.0
step = 0.0

[node name="Label3" type="Label" parent="ui/box/sliders"]
margin_left = 200.0
margin_top = 183.0
margin_right = 300.0
margin_bottom = 219.0
text = "vertices"
valign = 1

[node name="angles" type="HSlider" parent="ui/box/sliders"]
margin_top = 223.0
margin_right = 185.0
margin_bottom = 259.0
rect_min_size = Vector2( 0, 30 )
size_flags_horizontal = 3
size_flags_vertical = 3
max_value = 4.0
step = 0.0
value = 4.0
script = SubResource( 3 )

[node name="Label5" type="Label" parent="ui/box/sliders"]
margin_left = 200.0
margin_top = 223.0
margin_right = 300.0
margin_bottom = 259.0
text = "square"
valign = 1

[node name="equation" type="Label" parent="ui"]
anchor_left = 1.0
anchor_right = 1.0
margin_left = -455.0
margin_top = 20.0
margin_right = -20.0
margin_bottom = 39.0
grow_horizontal = 0
size_flags_horizontal = 11
size_flags_vertical = 0
theme = ExtResource( 2 )
text = "|x|²·⁰⁰ + |y|²·⁰⁰ = 10.00²·⁰⁰"
align = 2
script = SubResource( 8 )

[connection signal="value_changed" from="ui/box/sliders/sharpness" to="ui" method="sharpness_changed"]
[connection signal="value_changed" from="ui/box/sliders/size" to="ui" method="size_changed"]
[connection signal="value_changed" from="ui/box/sliders/resolution" to="ui" method="resolution_changed"]
[connection signal="value_changed" from="ui/box/sliders/vertices" to="ui" method="show_vertices_changed"]
[connection signal="angle_changed" from="ui/box/sliders/angles" to="ui" method="angle_changed"]
